name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PHP_VERSION: '8.3'
  NODE_VERSION: '20'

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests (PHP ${{ env.PHP_VERSION }})
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: atlas_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis, zip, gd
          coverage: xdebug
          tools: composer:v2

      - name: Validate composer.json
        run: composer validate --strict

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Copy environment file
        run: cp api/env.example api/.env

      - name: Generate application key
        run: cd api && php artisan key:generate

      - name: Run PHPStan
        run: cd api && ./vendor/bin/phpstan analyse --memory-limit=2G

      - name: Run PHP Insights
        run: cd api && ./vendor/bin/phpinsights analyse --no-interaction

      - name: Run Pint
        run: cd api && ./vendor/bin/pint --test

      - name: Run tests
        run: cd api && ./vendor/bin/pest --coverage --min=80

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: api/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests (Node ${{ env.NODE_VERSION }})
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: app
        run: npm ci

      - name: Run TypeScript check
        working-directory: app
        run: npm run type-check

      - name: Run ESLint
        working-directory: app
        run: npm run lint

      - name: Run Prettier check
        working-directory: app
        run: npx prettier --check src/

      - name: Run unit tests
        working-directory: app
        run: npm run test:unit -- --coverage

      - name: Run E2E tests
        working-directory: app
        run: npm run test:e2e

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: app/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Deploy (only on main branch)
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Build frontend
        working-directory: app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: app/dist/

      - name: Deploy to production
        run: echo "Deploy to production server"
        # Add your deployment steps here
